import 'package:meta/meta.dart';

import '../dependency_type.dart';
import '../hosted_package_dependency.dart';
import '../package_dependency.dart';
import '../sdk_dependency.dart';
import '../sdk_package_dependency.dart';

String formatToYaml({
  @required Iterable<SdkDependency> sdks,
  @required Iterable<PackageDependency> packages,
}) =>
    "# Generated by pub"
    "\n# See https://dart.dev/tools/pub/glossary#lockfile"
    "${packages.isEmpty ? "" : _formatPackagesDependencies(packages)}"
    "${sdks.isEmpty ? "" : _formatSdkDependencies(sdks)}"
    "\n";

String _formatSdkDependencies(Iterable<SdkDependency> sdks) =>
    "\nsdks:${sdks.map((sdk) => "\n  ${sdk.sdk}: \"${sdk.version}\"").join()}";

String _formatPackagesDependencies(Iterable<PackageDependency> packages) =>
    "\npackages:${packages.map(_formatPackage).join()}";

String _formatPackage(PackageDependency package) => package.iswitcho(
      sdk: (p) => _formatSdkPackageDependency(p),
      hosted: (p) => _formatHostedPackageDependency(p),
      otherwise: () => '',
    );

String _formatSdkPackageDependency(SdkPackageDependency package) => '''
\n  ${package.package}:
    dependency: ${_formatLiteral(_convertDepTypeToString(package.type))}
    description: ${package.description}
    source: sdk
    version: \"${package.version}\"''';

String _formatHostedPackageDependency(HostedPackageDependency package) => '''
\n  ${package.package}:
    dependency: ${_formatLiteral(_convertDepTypeToString(package.type))}
    description:
      name: ${package.name}
      url: \"${package.url}\"
    source: hosted
    version: \"${package.version}\"''';

String _convertDepTypeToString(DependencyType dependencyType) {
  switch (dependencyType) {
    case DependencyType.direct:
      return "direct main";
    case DependencyType.development:
      return "direct dev";
    case DependencyType.transitive:
      return "transitive";
  }
  throw AssertionError(dependencyType);
}

String _formatLiteral(String s) => s.contains(RegExp(r'\s')) ? "\"$s\"" : s;
